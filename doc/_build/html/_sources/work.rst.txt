Интерфейс программы
===================


"Облачный" запуск
-----------------

Для запуска достаточно выполнить/запустить первую ячейку с кодом в colab ноутбуке https://colab.research.google.com/drive/1HwwHbwYvMYujCgNv6mn3EiP2WGa-TJRr?usp=sharing, при этом загрузка кода платформы из репозитория, инициализация и запуск приложения происходят в автоматическом режиме.


"Локальный" запуск
------------------

На конкретное устройство загружается программный код платформы (например, из репозитория на github), устанавливается anaconda, представляющая дистрибутив python с набором библиотек, затем в рамках консольного интерфейса (терминала) последовательно выполняются следующие команды из корня проекта:

1. Создать виртуальное окружение:

    .. code-block:: bash

      conda create --name intevis python=3.7

2. Перейти в виртуальное окружение `intevis`:

    .. code-block:: bash

      conda activate intevis

3. Установить все необходимые зависимости:

    .. code-block:: bash

      pip install -r requirements.txt

4. Запустить jupyter-ноутбук:

    .. code-block:: bash

      jupyter lab

5. В интерфейсе jupyter ноутбука открыть файл `intevis.ipynb` и выполнить/запустить первую ячейку с кодом.

6. По окончании работы при необходимости можно удалить окружение:

    .. code-block:: bash

      conda activate && conda remove --name intevis --all


Структура файлов и папок
------------------------

Для разработки платформы intevis (INTEllectual VISualization) использовался язык программирования python, фреймворк ML pytorch и интерактивный браузерный интерфейс jupyter (либо его реализация в форме облачного интерфейса colab от Google).
Соответственно программный код был организован в форме python-пакета, имеющего следующую структуру файлов и папок:

- `intevis.py` - основной скрипт ПО, содержащий класс `Intevis`, представляющий менеджер ПО. Для запуска графического пользовательского интерфейса следует использовать метод класса `gui`;
- `activation` - папка содержит программный код, связанный с активаций отдельных нейронов и слоев ИНС;
- `architecture` - папка содержит программный код, связанный c визуализацией архитектуры ИНС;
- `attribution` - папка содержит программный код, связанный с построением атрибуции ИНС;
- `doc` - папка содержит программный код автоматически генерируемой документации:
- `gui` - папка содержит программный код, связанный с графическим пользовательским интерфейсом.

В папке `gui` содержится:

- `gui.py` - основной скрипт, содержащий класс `Gui`, представляющий менеджер графического пользовательского интерфейса. В качестве основы используется популярный python пакет `ipywidgets`;
- `style.css` - файл содержит css-стили пользовательского интерфейса приложения;
- `components` - папка содержит основные компоненты (вкладки) пользовательского интерфейса. Подробные комментарии по использованию элементов приведены в базовом классе `Component` в файле `component.py`;
- `elements` - папка содержит элементы пользовательского интерфейса (кнопки, выпадающие меню и т.п.). Подробные комментарии по использованию элементов приведены в базовом классе `Element` в файле `element.py`.
