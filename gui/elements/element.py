import ipywidgets


class Element():
    """Базовый класс, представляющий элемент графического интерфейса.

    Все конкретные элементы графического интерфейса наследуют данный класс.
    Каждый элемент должен принимать в качестве аргументов конструктора
    основные свойства (например, текст для текстового поля). Вспомогательные
    аргументы (например, ширина) должны передаваться в качестве аргументов
    метода "set". В методе "build" в каждом элементе должна быть создана
    переменная "self.wgt", представляющая непосредственно виджет класса
    ipywidgets (эта переменная будет использоваться при создании вложенных
    элементов, при отрисовке элементов и т.п.).

    Note:
        Простейший способ создания элемента: "elm = Element(*СВОЙСТВА*)".
        Если необходимо указать вспомогательные аргументы, то создавать
        элемент необходимо следующим образом:
        "elm = Element(*ВСПОМОГАТЕЛЬНЫЕ СВОЙСТВА*).set(*СВОЙСТВА*).build()".

        Конструктор каждого элемента в качестве последнего аргумента должен
        иметь "kind", соответствующий типу элемента, который может быть:
        "p" ("primary"), "s" ("secondary"), "t" ("tertiary"), "a"
        ("accent"), "w" ("warning").

        Каждому элементу (с именем NAME) должен быть задан css-класс
        "e-element", а также "e-NAME". Описание соответствующих css-стилей
        приводится в файле "/gui/style.css".

    """
    def __init__(self, kind='p'):
        self.kind = kind

        self.set()
        self.build()

    def add_class(self, class_name):
        """Метод осуществляет добавление css-класса к элементу.

        Args:
            class_name (str): имя класса.

        """
        self.wgt.add_class(class_name)

    def build(self):
        """Метод осуществляет непосредственно построение элемента."""
        self.wgt = None

        return self

    def layout(self):
        """Метод возвращает лейаут (разметку) для элемента."""
        return ipywidgets.Layout(
            margin                  = '0px',
            width                   = self.w,
            height                  = self.h,
            min_width               = '50px',
            padding                 = '0px',
        )

    def set(self, w='auto', h='auto'):
        """Метод для задания дополнительных свойств элемента.

        Args:
            w (str): ширина элемента (например, "100px" или "auto").
            h (str): высота элемента (например, "100px" или "auto").

        Returns:
            Element: текущий экземпляр класса.

        """
        self.w = w
        self.h = h

        return self
